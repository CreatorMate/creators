generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String              @id(map: "creators_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  handle            String?             @db.VarChar
  based_in          String?             @db.VarChar
  project_types     String[]
  date_of_birth     String?             @db.VarChar
  additional_info   String?
  first_name        String?             @db.VarChar
  last_name         String?
  work_types        String[]
  email             String
  status            account_status      @default(NEW)
  picture           String?
  instagram_account instagram_account[]
  job_applications  job_applications[]
  job_postings      job_postings[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model job_postings {
  id               Int                @id(map: "job_post_pkey") @default(autoincrement())
  posted_by        String             @db.Uuid
  title            String?
  looking_for      String?
  date             String?
  description      String?
  place            String?
  job_applications job_applications[]
  users            users              @relation(fields: [posted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_post_posted_by_fkey")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model job_applications {
  id           Int           @id @default(autoincrement())
  job_post     Int?
  user_id      String?       @db.Uuid
  application  String?
  portfolio    String?
  job_postings job_postings? @relation(fields: [job_post], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instagram_account {
  id                Int      @id @default(autoincrement())
  user_id           String?  @db.Uuid
  verification_code String?
  follower_count    Int?
  verified          Boolean? @default(false)
  sender_id         String?
  handle            String
  users             users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum account_status {
  NEW
  IN_REVIEW
  IN_PROCESS
  ACCEPTED
}
